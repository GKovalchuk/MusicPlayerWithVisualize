/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _playlistLogic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playlistLogic.js */ \"./src/js/playlistLogic.js\");\n/* harmony import */ var _readFiles_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./readFiles.js */ \"./src/js/readFiles.js\");\n\r\n\r\n\r\n/*\r\nСоздаем начальный json на 5 песен. Не стал создавать для этого сервер и\r\nсчитывать файлы в json, задача, вроде как, другая.\r\n*/\r\nconst initialJson = JSON.stringify([\r\n\t{ keyDB: null, name: \"01 - Spiritual State\", src: \"/audio/01 - Spiritual State.mp3\", type: \"mp3\", queue: 0 },\r\n\t{ keyDB: null, name: \"16 - Reflection Eternal\", src: \"/audio/16 - Reflection Eternal.mp3\", type: \"mp3\", queue: 1 },\r\n\t{\r\n\t\tkeyDB: null,\r\n\t\tname: \"AnnenMayKantereit-x-Parcels-—-Can_t-Get-You-out-of-My-Head-_Кавер-версия_-_www.lightaudio.ru_\",\r\n\t\tsrc: \"/audio/AnnenMayKantereit-x-Parcels-—-Can_t-Get-You-out-of-My-Head-_Кавер-версия_-_www.lightaudio.ru_.wav\",\r\n\t\ttype: \"wav\",\r\n\t\tqueue: 2,\r\n\t},\r\n\t{\r\n\t\tkeyDB: null,\r\n\t\tname: \"Never Get Enough feat. Kathy Brown\",\r\n\t\tsrc: \"/audio/Never Get Enough feat. Kathy Brown.mp3\",\r\n\t\ttype: \"mp3\",\r\n\t\tqueue: 3,\r\n\t},\r\n\t{\r\n\t\tkeyDB: null,\r\n\t\tname: \"Nujabes - Luv (Sic.) Pt.3 feat. Shing02\",\r\n\t\tsrc: \"/audio/Nujabes - Luv (Sic.) Pt.3 feat. Shing02.mp3\",\r\n\t\ttype: \"mp3\",\r\n\t\tqueue: 4,\r\n\t},\r\n]);\r\n\r\n// Записываем файл плейлиста в localStorage.\r\nlocalStorage.setItem(\"playlist\", initialJson);\r\n\r\n// Добавление новых файлов.\r\n(0,_readFiles_js__WEBPACK_IMPORTED_MODULE_1__.readFiles)();\r\n\r\n// Создание прослушивателей событий.\r\n(0,_playlistLogic_js__WEBPACK_IMPORTED_MODULE_0__.playlistLogic)();\r\n\n\n//# sourceURL=webpack://simplegulp/./src/js/app.js?");

/***/ }),

/***/ "./src/js/loadPlaylist.js":
/*!********************************!*\
  !*** ./src/js/loadPlaylist.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadPlaylist: () => (/* binding */ loadPlaylist)\n/* harmony export */ });\n// Загружаем плейлист из localStorage.\r\nconst loadPlaylist = () => {\r\n\t// Проверяем, есть ли ключ playlist в localStorage.\r\n\tif (localStorage.getItem(\"playlist\")) {\r\n\t\t// Парсим json и возвращаем массив объектов.\r\n\t\treturn JSON.parse(localStorage.getItem(\"playlist\"));\r\n\t} else {\r\n\t\t// Если нет, то возвращаем пустой массив.\r\n\t\treturn [];\r\n\t}\r\n};\r\n\n\n//# sourceURL=webpack://simplegulp/./src/js/loadPlaylist.js?");

/***/ }),

/***/ "./src/js/playlistLogic.js":
/*!*********************************!*\
  !*** ./src/js/playlistLogic.js ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   playlistLogic: () => (/* binding */ playlistLogic)\n/* harmony export */ });\n/* harmony import */ var _loadPlaylist_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadPlaylist.js */ \"./src/js/loadPlaylist.js\");\n/* harmony import */ var _renderVisualisation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderVisualisation.js */ \"./src/js/renderVisualisation.js\");\n\r\n\r\n\r\nconst playlistContainer = document.getElementById(\"playlistContainer\");\r\nconst nameContainer = document.getElementById(\"track-name\");\r\nconst shuffleButton = document.getElementById(\"shuffle\");\r\nconst loopButton = document.getElementById(\"loop\");\r\nconst nextButton = document.getElementById(\"next\");\r\nconst prevButton = document.getElementById(\"prev\");\r\n// Случайный порядок.\r\nlet shuffle = false;\r\n// Случайный порядок.\r\nlet loop = false;\r\n\r\nconst playlistLogic = () => {\r\n\t// Текущий индекс трека в плейлисте.\r\n\tlet currentTrack = 0;\r\n\r\n\t// Получаем плейлист.\r\n\tconst playlist = (0,_loadPlaylist_js__WEBPACK_IMPORTED_MODULE_0__.loadPlaylist)();\r\n\r\n\t// Создаем элементы для нового трека.\r\n\tconst buildAudioSrc = (track) => {\r\n\t\taudio.removeAttribute(\"src\");\r\n\t\tif (!track) {\r\n\t\t\tconsole.error(\"трек не найден\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Устанавливаем атрибуты src и type у элемента audio.\r\n\t\taudio.setAttribute(\"src\", track.src);\r\n\t\taudio.setAttribute(\"type\", track.type);\r\n\t\t// Рендер имени текущего трека.\r\n\t\trenderTrackName(track);\r\n\t};\r\n\r\n\t// Воспроизведения трека из плейлиста.\r\n\tconst playTrack = (index) => {\r\n\t\t// Проверяем, что индекс в допустимом диапазоне.\r\n\t\tif (index >= 0 && index < playlist.length) {\r\n\t\t\t// Ищем нужный трек.\r\n\t\t\tconst track = playlist.filter((track) => index === track.queue)[0];\r\n\r\n\t\t\t// Проверяем, трек находится в БД, или на сервере.\r\n\t\t\tif (!track.keyDB) {\r\n\t\t\t\t// Создаем элементы для нового трека.\r\n\t\t\t\tbuildAudioSrc(track);\r\n\t\t\t\t// Воспроизводим трек.\r\n\t\t\t\taudio.play();\r\n\t\t\t} else {\r\n\t\t\t\t// Открываем базу данных.\r\n\t\t\t\tconst request = indexedDB.open(\"audioDB\", 1);\r\n\t\t\t\t// Когда БД открыта.\r\n\t\t\t\trequest.onsuccess = function (event) {\r\n\t\t\t\t\t// Получаем объект базы данных.\r\n\t\t\t\t\tconst db = event.target.result;\r\n\t\t\t\t\t// Создаем транзакцию.\r\n\t\t\t\t\tconst transaction = db.transaction([\"tracks\"], \"readonly\");\r\n\t\t\t\t\t// Получаем таблицу tracks.\r\n\t\t\t\t\tconst objectStore = transaction.objectStore(\"tracks\");\r\n\t\t\t\t\t// Отправляем запрос в таблицу по id.\r\n\t\t\t\t\tconst request = objectStore.get(track.keyDB);\r\n\t\t\t\t\t// При успешном запросе.\r\n\t\t\t\t\trequest.onsuccess = function (event) {\r\n\t\t\t\t\t\t// Получаем результат запроса.\r\n\t\t\t\t\t\tconst trackData = event.target.result;\r\n\t\t\t\t\t\t// Проверяем.\r\n\t\t\t\t\t\tif (trackData) {\r\n\t\t\t\t\t\t\t// Передаем данные в src.\r\n\t\t\t\t\t\t\ttrack.src = trackData.data;\r\n\t\t\t\t\t\t\t// Создаем элементы для нового трека.\r\n\t\t\t\t\t\t\tbuildAudioSrc(track);\r\n\t\t\t\t\t\t\t// Воспроизводим трек.\r\n\t\t\t\t\t\t\taudio.play();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Выводим сообщение об ошибке, если объектпустой.\r\n\t\t\t\t\t\t\tconsole.log(`Track not found: ${track.name}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t// Обрабатываем событие ошибки при получении объекта.\r\n\t\t\t\t\trequest.onerror = function (event) {\r\n\t\t\t\t\t\t// Выводим сообщение об ошибке.\r\n\t\t\t\t\t\tconsole.log(`Error getting track: ${event.target.errorCode}`);\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\t\t\t\t// Обрабатываем событие ошибки при открытии базы данных\r\n\t\t\t\trequest.onerror = function (event) {\r\n\t\t\t\t\t// Выводим сообщение об ошибке\r\n\t\t\t\t\tconsole.log(\"Error opening database: \" + event.target.errorCode);\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// Если индекс недопустим, то выводим сообщение об ошибке.\r\n\t\t\tconsole.error(\"Invalid track index\");\r\n\t\t}\r\n\t};\r\n\r\n\t// Переключение на следующий трек в плейлисте.\r\n\tconst nextTrack = () => {\r\n\t\t// Проверяем, что плейлист не пустой.\r\n\t\tif (playlist.length > 0) {\r\n\t\t\t// Увеличиваем текущий индекс на единицу.\r\n\t\t\tcurrentTrack += 1;\r\n\t\t\t// Если текущий индекс выходит за пределы плейлиста, то обнуляем его.\r\n\t\t\tif (currentTrack >= playlist.length) {\r\n\t\t\t\tcurrentTrack = 0;\r\n\t\t\t}\r\n\t\t\t// При включенном shuffle идем по его списку.\r\n\t\t\tif (shuffle) {\r\n\t\t\t\tplayTrack(shuffle[currentTrack]);\r\n\t\t\t} else {\r\n\t\t\t\t// Воспроизводим трек по новому индексу.\r\n\t\t\t\tplayTrack(currentTrack);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// Если плейлист пустой, то выводим сообщение об ошибке.\r\n\t\t\tconsole.error(\"Empty playlist\");\r\n\t\t}\r\n\t};\r\n\r\n\t// Переключение на предыдущий трек в плейлисте.\r\n\tconst prevTrack = () => {\r\n\t\t// Проверяем, что плейлист не пустой.\r\n\t\tif (playlist.length > 0) {\r\n\t\t\t// Уменьшаем текущий индекс на единицу.\r\n\t\t\tcurrentTrack -= 1;\r\n\t\t\t/*\r\n\t\t\tЕсли текущий индекс выходит за пределы плейлиста, то устанавливаем его на\r\n      последний элемент.\r\n      */\r\n\t\t\tif (currentTrack < 0) {\r\n\t\t\t\tcurrentTrack = playlist.length - 1;\r\n\t\t\t}\r\n\t\t\t// При включенном shuffle идем по его списку.\r\n\t\t\tif (shuffle) {\r\n\t\t\t\tplayTrack(shuffle[currentTrack]);\r\n\t\t\t} else {\r\n\t\t\t\t// Воспроизводим трек по новому индексу.\r\n\t\t\t\tplayTrack(currentTrack);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// Если плейлист пустой, то выводим сообщение об ошибке.\r\n\t\t\tconsole.error(\"Empty playlist\");\r\n\t\t\tplayTrack;\r\n\t\t}\r\n\t};\r\n\r\n\tconst shuffleTracks = () => {\r\n\t\tif (!shuffle) {\r\n\t\t\t// Выдаем класс кнопке shuffle.\r\n\t\t\tshuffleButton.classList.add(\"player__track-controls--active\");\r\n\t\t\t// Создаем массив для случайного порядка.\r\n\t\t\tshuffle = [];\r\n\t\t\t// Заполняем массив числами.\r\n\t\t\tfor (let i = 0; i < playlist.length; i++) shuffle.push(i);\r\n\t\t\t// Подготавливаем переменные для перемешивания.\r\n\t\t\tlet currentIndex = shuffle.length;\r\n\t\t\tlet shuffleIndex;\r\n\r\n\t\t\t// Перемешиваем.\r\n\t\t\twhile (0 !== currentIndex) {\r\n\t\t\t\t// Получаем текущий индекс.\r\n\t\t\t\tcurrentIndex -= 1;\r\n\t\t\t\t// Получаем его новое рандомное место (всегда меньше длины плейлиста).\r\n\t\t\t\tshuffleIndex = Math.floor(Math.random() * playlist.length);\r\n\r\n\t\t\t\t// Меняем местами элементы.\r\n\t\t\t\t[shuffle[currentIndex], shuffle[shuffleIndex]] = [shuffle[shuffleIndex], shuffle[currentIndex]];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// Удаляем класс кнопке shuffle.\r\n\t\t\tshuffleButton.classList.remove(\"player__track-controls--active\");\r\n\t\t\t// Удаляем массив.\r\n\t\t\tshuffle = false;\r\n\t\t}\r\n\t};\r\n\r\n\tconst renderPlaylist = () => {\r\n\t\tplaylistContainer.innerHTML = \"\";\r\n\t\tconst buttonList = [];\r\n\t\tplaylist.forEach((track) => {\r\n\t\t\tconst button = document.createElement(\"button\");\r\n\t\t\tbutton.classList.add(\"playlist__container_btn\");\r\n\t\t\tbutton.type = \"button\";\r\n\t\t\tbutton.textContent = track.name;\r\n\t\t\tbutton.queue = track.queue;\r\n\t\t\tbutton.addEventListener(\"click\", () => {\r\n\t\t\t\tcurrentTrack = track.queue;\r\n\t\t\t\tplayTrack(track.queue);\r\n\t\t\t});\r\n\t\t\tbuttonList.push(button);\r\n\t\t});\r\n\t\tbuttonList.sort((a, b) => a.queue - b.queue);\r\n\t\tbuttonList.forEach((button) => playlistContainer.append(button));\r\n\t};\r\n\r\n\t// Рендер имени текущего трека.\r\n\tconst renderTrackName = (track) => {\r\n\t\t// Выводим имя на экран.\r\n\t\tnameContainer.textContent = track.name;\r\n\t};\r\n\r\n\t// Зацикливание текущего трека.\r\n\tconst loopTrack = () => {\r\n\t\tif (loop) {\r\n\t\t\t// Выдаем класс кнопке loop.\r\n\t\t\tloopButton.classList.add(\"player__track-controls--active\");\r\n\t\t\t// Меняем обработчики событий.\r\n\t\t\taudio.removeEventListener(\"ended\", nextTrackWithDebounce);\r\n\t\t\taudio.addEventListener(\"ended\", loopWithDebounce);\r\n\t\t} else {\r\n\t\t\t// Удаляем класс кнопке loop.\r\n\t\t\tloopButton.classList.remove(\"player__track-controls--active\");\r\n\t\t\t// Меняем обработчики событий.\r\n\t\t\taudio.removeEventListener(\"ended\", loopWithDebounce);\r\n\t\t\taudio.addEventListener(\"ended\", nextTrackWithDebounce);\r\n\t\t}\r\n\t};\r\n\r\n\t// Фукнция, реализующая debounce\r\n\tfunction debounce(callee, timeoutMs) {\r\n\t\treturn function perform(...args) {\r\n\t\t\t// Время предыдущего и текущего вызова.\r\n\t\t\tlet previousCall = this.lastCall;\r\n\t\t\tthis.lastCall = Date.now();\r\n\t\t\t/*\r\n\t\t\t\tОчищаем таймаут если разница во времени между вызовами меньше, чем\r\n\t\t\t\tуказанный интервал.\r\n\t\t\t\t*/\r\n\t\t\tif (previousCall && this.lastCall - previousCall <= timeoutMs) {\r\n\t\t\t\tclearTimeout(this.lastCallTimer);\r\n\t\t\t}\r\n\r\n\t\t\t// Установка таймаута, вызывающего функцию.\r\n\t\t\tthis.lastCallTimer = setTimeout(() => callee(...args), timeoutMs);\r\n\t\t};\r\n\t}\r\n\r\n\tconst nextTrackWithDebounce = debounce(nextTrack, 100);\r\n\tconst prevTrackWithDebounce = debounce(prevTrack, 100);\r\n\tconst loopWithDebounce = debounce(() => {\r\n\t\tif (shuffle) {\r\n\t\t\tplayTrack(shuffle[currentTrack]);\r\n\t\t} else {\r\n\t\t\tplayTrack(currentTrack);\r\n\t\t}\r\n\t}, 100);\r\n\r\n\t// Добавляем обработчики событий на кнопки next и prev.\r\n\tnextButton.addEventListener(\"click\", nextTrackWithDebounce);\r\n\tprevButton.addEventListener(\"click\", prevTrackWithDebounce);\r\n\tshuffleButton.addEventListener(\"click\", shuffleTracks);\r\n\tloopButton.addEventListener(\"click\", () => {\r\n\t\tloop = !loop;\r\n\t\tloopTrack();\r\n\t});\r\n\r\n\t// Добавляем к событию play запуск визуализации.\r\n\taudio.addEventListener(\"play\", _renderVisualisation_js__WEBPACK_IMPORTED_MODULE_1__.visualisationAudio, { once: true });\r\n\taudio.addEventListener(\"ended\", nextTrackWithDebounce);\r\n\r\n\tloopTrack();\r\n\t// Перерисовываем плейлист при перезагрузке плейлиста.\r\n\trenderPlaylist();\r\n};\r\n\n\n//# sourceURL=webpack://simplegulp/./src/js/playlistLogic.js?");

/***/ }),

/***/ "./src/js/readFiles.js":
/*!*****************************!*\
  !*** ./src/js/readFiles.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   readFiles: () => (/* binding */ readFiles)\n/* harmony export */ });\n/* harmony import */ var _playlistLogic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playlistLogic.js */ \"./src/js/playlistLogic.js\");\n/* harmony import */ var _loadPlaylist_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadPlaylist.js */ \"./src/js/loadPlaylist.js\");\n\r\n\r\n\r\nconst input = document.getElementById(\"playlist__input\");\r\n\r\nconst readFiles = () => {\r\n\t// Создаем прослушиватель на инпуте.\r\n\tinput.addEventListener(\"change\", () => {\r\n\t\t// Создаем (открываем) Базу Данных.\r\n\t\tlet request = indexedDB.open(\"audioDB\", 1);\r\n\r\n\t\t// Прослушиватель обновления БД.\r\n\t\trequest.onupgradeneeded = (event) => {\r\n\t\t\t// Получаем объект базы данных из события.\r\n\t\t\tlet db = event.target.result;\r\n\r\n\t\t\t// Создаем таблицу с именем \"tracks\" и ключом \"id\".\r\n\t\t\tdb.createObjectStore(\"tracks\", { keyPath: \"id\" });\r\n\t\t};\r\n\r\n\t\t// При успешном открытии БД.\r\n\t\trequest.onsuccess = (event) => {\r\n\t\t\t// Получаем список файлов из инпута.\r\n\t\t\tconst files = input.files;\r\n\r\n\t\t\t// Проходим по списку файлов.\r\n\t\t\tfor (let index = 0; index < files.length; index += 1) {\r\n\t\t\t\t// Получаем текущий файл из объекта.\r\n\t\t\t\tconst file = files[index];\r\n\r\n\t\t\t\t// Получаем расширение файла.\r\n\t\t\t\tlet extension = file.name.split(\".\")[file.name.split(\".\").length - 1];\r\n\t\t\t\t// Проверяем, является ли файл mp3 или wav.\r\n\t\t\t\tif (extension != \"mp3\" && extension != \"wav\") {\r\n\t\t\t\t\talert(\"Выберите аудиофайл формата .mp3 или .wav\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Создаем объект FileReader для чтения содержимого файла.\r\n\t\t\t\tlet reader = new FileReader();\r\n\r\n\t\t\t\t// Подгружаем данные старого плейлиста.\r\n\t\t\t\tconst prevPlaylist = (0,_loadPlaylist_js__WEBPACK_IMPORTED_MODULE_1__.loadPlaylist)();\r\n\t\t\t\tconst startIndex = prevPlaylist[prevPlaylist.length - 1].queue + 1;\r\n\r\n\t\t\t\t// Прослушиватель конца загрузки файла.\r\n\t\t\t\treader.addEventListener(\"load\", async () => {\r\n\t\t\t\t\t// Задаем очередность для трека.\r\n\t\t\t\t\tlet queue = startIndex + index;\r\n\t\t\t\t\t// Получаем данные файла.\r\n\t\t\t\t\tlet data = reader.result;\r\n\r\n\t\t\t\t\t// Получаем имя файла из свойства name файла.\r\n\t\t\t\t\tlet name = file.name;\r\n\r\n\t\t\t\t\t// Снова получаем объект БД.\r\n\t\t\t\t\tlet db = event.target.result;\r\n\t\t\t\t\t// Открываем транзакцию для записи в таблицу tracks.\r\n\t\t\t\t\tlet transaction = db.transaction(\"tracks\", \"readwrite\");\r\n\t\t\t\t\t// Получаем таблицу tracks.\r\n\t\t\t\t\tlet store = transaction.objectStore(\"tracks\");\r\n\r\n\t\t\t\t\t// Создаем объект с данными файла.\r\n\t\t\t\t\tlet track = { id: name + queue, data: data };\r\n\r\n\t\t\t\t\t// Добавляем объект с данными файла в таблицу tracks.\r\n\t\t\t\t\tlet addRequest = store.put(track);\r\n\r\n\t\t\t\t\t// При успешном добавлении объекта.\r\n\t\t\t\t\taddRequest.onsuccess = () => {\r\n\t\t\t\t\t\t// Подгружаем данные старого плейлиста.\r\n\t\t\t\t\t\tconst curPlaylist = (0,_loadPlaylist_js__WEBPACK_IMPORTED_MODULE_1__.loadPlaylist)();\r\n\t\t\t\t\t\t// Создаем новый плейлист. Преобразуем в JSON-строку.\r\n\t\t\t\t\t\tconst json = JSON.stringify(\r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t...curPlaylist,\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tkeyDB: track.id,\r\n\t\t\t\t\t\t\t\t\tname: name,\r\n\t\t\t\t\t\t\t\t\ttype: extension,\r\n\t\t\t\t\t\t\t\t\tqueue: queue,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t].sort((a, b) => a.queue - b.queue)\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t// Записываем новый массив в localStorage.\r\n\t\t\t\t\t\tlocalStorage.setItem(\"playlist\", json);\r\n\t\t\t\t\t\t// Отрисовываем изменения.\r\n\t\t\t\t\t\t(0,_playlistLogic_js__WEBPACK_IMPORTED_MODULE_0__.playlistLogic)();\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Добавляем обработчик события onerror, который будет срабатывать при ошибке добавления объекта\r\n\t\t\t\t\taddRequest.onerror = (event) => {\r\n\t\t\t\t\t\t// Выводим сообщение об ошибке\r\n\t\t\t\t\t\tconsole.log(\"Error adding file \" + \"name :\" + event.target.errorCode);\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Читаем файл как base64\r\n\t\t\t\treader.readAsDataURL(file);\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n};\r\n\n\n//# sourceURL=webpack://simplegulp/./src/js/readFiles.js?");

/***/ }),

/***/ "./src/js/renderVisualisation.js":
/*!***************************************!*\
  !*** ./src/js/renderVisualisation.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   visualisationAudio: () => (/* binding */ visualisationAudio)\n/* harmony export */ });\n// Визуализация воспроизводимого звука.\r\nconst visualisationAudio = () => {\r\n\tconst audio = document.getElementById(\"audio\");\r\n\tconst canvas = document.getElementById(\"canvas\");\r\n\r\n\t// Создаем контекст Web Audio.\r\n\tconst audioCtx = new AudioContext();\r\n\t// Создаем источник звука.\r\n\tconst source = audioCtx.createMediaElementSource(audio);\r\n\t// Создаем анализатор для получения данных о звуке.\r\n\tlet analyser = audioCtx.createAnalyser();\r\n\t/*\r\n\tУстанавливаем размер окна для БПФ.\r\n\tЧем меньше значение, тем плавнее и глубже будет кривая.\r\n\t*/\r\n\tanalyser.fftSize = 4096;\r\n\t// Преобразуем и записываем данные в массив.\r\n\tconst dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n\t// Соединяем источник, анализатор и выход.\r\n\tsource.connect(analyser);\r\n\tanalyser.connect(audioCtx.destination);\r\n\r\n\t// Получаем контекст canvas.\r\n\tconst context = canvas.getContext(\"2d\");\r\n\t// Устанавливаем размеры canvas.\r\n\tcanvas.width = window.innerWidth;\r\n\tcanvas.height = window.innerHeight;\r\n\t// Рисование звуковых волн на canvas.\r\n\tfunction drawWave(context, data) {\r\n\t\t// Устанавливаем цвет заливки.\r\n\t\tcontext.fillStyle = \"black\";\r\n\t\t// Начинаем новый путь.\r\n\t\tcontext.beginPath();\r\n\t\t// Перемещаемся в начальную точку (левый нижний угол).\r\n\t\tcontext.moveTo(0, canvas.height);\r\n\t\t// Проходим по массиву данных, содержащему амплитуды звука.\r\n\t\tfor (let i = 0; i < data.length; i += 1) {\r\n\t\t\t// Вычисляем координату x на основе индекса и ширины canvas.\r\n\t\t\tlet x = (i * canvas.width) / data.length;\r\n\t\t\t// Вычисляем координату y на основе амплитуды и высоты canvas.\r\n\t\t\tlet y = canvas.height - (data[i] * canvas.height) / 256;\r\n\t\t\t// Рисуем линию к текущей точке (x, y).\r\n\t\t\tcontext.lineTo(x, y);\r\n\t\t}\r\n\t\t// Рисуем линию к правому нижнему углу.\r\n\t\tcontext.lineTo(canvas.width, canvas.height);\r\n\t\t// Закрываем путь.\r\n\t\tcontext.closePath();\r\n\t\t// Заливаем путь цветом.\r\n\t\tcontext.fill();\r\n\t}\r\n\r\n\t// Версия с троттлингом\r\n\tfunction throttle(callee, timeout) {\r\n\t\t// Создаем таймер.\r\n\t\tlet timer = null;\r\n\r\n\t\treturn function perform(...args) {\r\n\t\t\t// Прекращение выполнения, если таймер уже существует.\r\n\t\t\tif (timer) return;\r\n\r\n\t\t\t// Запуск функции создает таймер.\r\n\t\t\ttimer = setTimeout(() => {\r\n\t\t\t\tcallee(...args);\r\n\r\n\t\t\t\t// По окончанию очищаем таймер.\r\n\t\t\t\tclearTimeout(timer);\r\n\t\t\t\ttimer = null;\r\n\t\t\t}, timeout);\r\n\t\t};\r\n\t}\r\n\r\n\t// Функция для обновления анимации звуковой волны.\r\n\tfunction updateWave() {\r\n\t\t// // Получаем данные о частоте звука.\r\n\t\t// analyser.getByteFrequencyData(dataArray);\r\n\t\t// Очищаем канвас.\r\n\t\tcontext.fillStyle = \"white\";\r\n\t\tcontext.fillRect(0, 0, canvas.width, canvas.height);\r\n\t\t// Копируем данные из анализатора в массив.\r\n\t\tanalyser.getByteTimeDomainData(dataArray);\r\n\t\t// Рисуем звуковую волну на canvas.\r\n\t\tdrawWave(context, dataArray);\r\n\t\t// Запрашиваем следующий кадр.\r\n\t\t// const getAddressWithThrottle = throttle((updateWave) => {\r\n\t\t// }, 50);\r\n\t\t// getAddressWithThrottle(updateWave);\r\n\t\trequestAnimationFrame(updateWave);\r\n\t}\r\n\r\n\tupdateWave();\r\n};\r\n\n\n//# sourceURL=webpack://simplegulp/./src/js/renderVisualisation.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_require__("./src/js/app.js");
/******/ 	__webpack_require__("./src/js/loadPlaylist.js");
/******/ 	__webpack_require__("./src/js/playlistLogic.js");
/******/ 	__webpack_require__("./src/js/readFiles.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/renderVisualisation.js");
/******/ 	
/******/ })()
;